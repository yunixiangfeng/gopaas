// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.15.7
// source: proto/svc/svc.proto

package svc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SvcInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64      `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SvcNamespace    string     `protobuf:"bytes,2,opt,name=svc_namespace,json=svcNamespace,proto3" json:"svc_namespace,omitempty"`
	SvcName         string     `protobuf:"bytes,3,opt,name=svc_name,json=svcName,proto3" json:"svc_name,omitempty"`
	SvcPodName      string     `protobuf:"bytes,4,opt,name=svc_pod_name,json=svcPodName,proto3" json:"svc_pod_name,omitempty"`
	SvcType         string     `protobuf:"bytes,5,opt,name=svc_type,json=svcType,proto3" json:"svc_type,omitempty"`
	SvcExternalName string     `protobuf:"bytes,6,opt,name=svc_external_name,json=svcExternalName,proto3" json:"svc_external_name,omitempty"`
	SvcTeamId       string     `protobuf:"bytes,7,opt,name=svc_team_id,json=svcTeamId,proto3" json:"svc_team_id,omitempty"`
	SvcPort         []*SvcPort `protobuf:"bytes,8,rep,name=svc_port,json=svcPort,proto3" json:"svc_port,omitempty"`
}

func (x *SvcInfo) Reset() {
	*x = SvcInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_svc_svc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcInfo) ProtoMessage() {}

func (x *SvcInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_svc_svc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcInfo.ProtoReflect.Descriptor instead.
func (*SvcInfo) Descriptor() ([]byte, []int) {
	return file_proto_svc_svc_proto_rawDescGZIP(), []int{0}
}

func (x *SvcInfo) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SvcInfo) GetSvcNamespace() string {
	if x != nil {
		return x.SvcNamespace
	}
	return ""
}

func (x *SvcInfo) GetSvcName() string {
	if x != nil {
		return x.SvcName
	}
	return ""
}

func (x *SvcInfo) GetSvcPodName() string {
	if x != nil {
		return x.SvcPodName
	}
	return ""
}

func (x *SvcInfo) GetSvcType() string {
	if x != nil {
		return x.SvcType
	}
	return ""
}

func (x *SvcInfo) GetSvcExternalName() string {
	if x != nil {
		return x.SvcExternalName
	}
	return ""
}

func (x *SvcInfo) GetSvcTeamId() string {
	if x != nil {
		return x.SvcTeamId
	}
	return ""
}

func (x *SvcInfo) GetSvcPort() []*SvcPort {
	if x != nil {
		return x.SvcPort
	}
	return nil
}

type SvcPort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id              int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SvcId           int64  `protobuf:"varint,2,opt,name=svc_id,json=svcId,proto3" json:"svc_id,omitempty"`
	SvcPort         int32  `protobuf:"varint,3,opt,name=svc_port,json=svcPort,proto3" json:"svc_port,omitempty"`
	SvcTargetPort   int32  `protobuf:"varint,4,opt,name=svc_target_port,json=svcTargetPort,proto3" json:"svc_target_port,omitempty"`
	SvcNodePort     int32  `protobuf:"varint,5,opt,name=svc_node_port,json=svcNodePort,proto3" json:"svc_node_port,omitempty"`
	SvcPortProtocol string `protobuf:"bytes,6,opt,name=svc_port_protocol,json=svcPortProtocol,proto3" json:"svc_port_protocol,omitempty"`
}

func (x *SvcPort) Reset() {
	*x = SvcPort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_svc_svc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcPort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcPort) ProtoMessage() {}

func (x *SvcPort) ProtoReflect() protoreflect.Message {
	mi := &file_proto_svc_svc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcPort.ProtoReflect.Descriptor instead.
func (*SvcPort) Descriptor() ([]byte, []int) {
	return file_proto_svc_svc_proto_rawDescGZIP(), []int{1}
}

func (x *SvcPort) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *SvcPort) GetSvcId() int64 {
	if x != nil {
		return x.SvcId
	}
	return 0
}

func (x *SvcPort) GetSvcPort() int32 {
	if x != nil {
		return x.SvcPort
	}
	return 0
}

func (x *SvcPort) GetSvcTargetPort() int32 {
	if x != nil {
		return x.SvcTargetPort
	}
	return 0
}

func (x *SvcPort) GetSvcNodePort() int32 {
	if x != nil {
		return x.SvcNodePort
	}
	return 0
}

func (x *SvcPort) GetSvcPortProtocol() string {
	if x != nil {
		return x.SvcPortProtocol
	}
	return ""
}

type SvcId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *SvcId) Reset() {
	*x = SvcId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_svc_svc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SvcId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SvcId) ProtoMessage() {}

func (x *SvcId) ProtoReflect() protoreflect.Message {
	mi := &file_proto_svc_svc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SvcId.ProtoReflect.Descriptor instead.
func (*SvcId) Descriptor() ([]byte, []int) {
	return file_proto_svc_svc_proto_rawDescGZIP(), []int{2}
}

func (x *SvcId) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FindAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FindAll) Reset() {
	*x = FindAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_svc_svc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindAll) ProtoMessage() {}

func (x *FindAll) ProtoReflect() protoreflect.Message {
	mi := &file_proto_svc_svc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindAll.ProtoReflect.Descriptor instead.
func (*FindAll) Descriptor() ([]byte, []int) {
	return file_proto_svc_svc_proto_rawDescGZIP(), []int{3}
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_svc_svc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_proto_svc_svc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_proto_svc_svc_proto_rawDescGZIP(), []int{4}
}

func (x *Response) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type AllSvc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SvcInfo []*SvcInfo `protobuf:"bytes,1,rep,name=svc_info,json=svcInfo,proto3" json:"svc_info,omitempty"`
}

func (x *AllSvc) Reset() {
	*x = AllSvc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_svc_svc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AllSvc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AllSvc) ProtoMessage() {}

func (x *AllSvc) ProtoReflect() protoreflect.Message {
	mi := &file_proto_svc_svc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AllSvc.ProtoReflect.Descriptor instead.
func (*AllSvc) Descriptor() ([]byte, []int) {
	return file_proto_svc_svc_proto_rawDescGZIP(), []int{5}
}

func (x *AllSvc) GetSvcInfo() []*SvcInfo {
	if x != nil {
		return x.SvcInfo
	}
	return nil
}

var File_proto_svc_svc_proto protoreflect.FileDescriptor

var file_proto_svc_svc_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x76, 0x63, 0x2f, 0x73, 0x76, 0x63, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x73, 0x76, 0x63, 0x22, 0x8b, 0x02, 0x0a, 0x07, 0x53,
	0x76, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73,
	0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x76, 0x63, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x76, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x6f,
	0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x76,
	0x63, 0x50, 0x6f, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x76, 0x63, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x5f, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x73, 0x76, 0x63, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0b, 0x73, 0x76, 0x63, 0x5f, 0x74, 0x65, 0x61, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x76, 0x63, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x12,
	0x27, 0x0a, 0x08, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x76, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x07, 0x73, 0x76, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x22, 0xc3, 0x01, 0x0a, 0x07, 0x53, 0x76, 0x63,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x73, 0x76, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x73, 0x76, 0x63, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x76, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x73,
	0x76, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x76, 0x63, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x73, 0x76, 0x63, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x22,
	0x0a, 0x0d, 0x73, 0x76, 0x63, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x76, 0x63, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x76, 0x63, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73,
	0x76, 0x63, 0x50, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x17,
	0x0a, 0x05, 0x53, 0x76, 0x63, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x09, 0x0a, 0x07, 0x46, 0x69, 0x6e, 0x64, 0x41,
	0x6c, 0x6c, 0x22, 0x1c, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x10,
	0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67,
	0x22, 0x31, 0x0a, 0x06, 0x41, 0x6c, 0x6c, 0x53, 0x76, 0x63, 0x12, 0x27, 0x0a, 0x08, 0x73, 0x76,
	0x63, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x73,
	0x76, 0x63, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x07, 0x73, 0x76, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x32, 0xda, 0x01, 0x0a, 0x03, 0x53, 0x76, 0x63, 0x12, 0x27, 0x0a, 0x06, 0x41,
	0x64, 0x64, 0x53, 0x76, 0x63, 0x12, 0x0c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x76, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x28, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x76,
	0x63, 0x12, 0x0a, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x64, 0x1a, 0x0d, 0x2e,
	0x73, 0x76, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x2a,
	0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x76, 0x63, 0x12, 0x0c, 0x2e, 0x73, 0x76,
	0x63, 0x2e, 0x53, 0x76, 0x63, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x0d, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0b, 0x46, 0x69,
	0x6e, 0x64, 0x53, 0x76, 0x63, 0x42, 0x79, 0x49, 0x44, 0x12, 0x0a, 0x2e, 0x73, 0x76, 0x63, 0x2e,
	0x53, 0x76, 0x63, 0x49, 0x64, 0x1a, 0x0c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x53, 0x76, 0x63, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x00, 0x12, 0x29, 0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c, 0x6c,
	0x53, 0x76, 0x63, 0x12, 0x0c, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x41, 0x6c,
	0x6c, 0x1a, 0x0b, 0x2e, 0x73, 0x76, 0x63, 0x2e, 0x41, 0x6c, 0x6c, 0x53, 0x76, 0x63, 0x22, 0x00,
	0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x76, 0x63, 0x3b,
	0x73, 0x76, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_svc_svc_proto_rawDescOnce sync.Once
	file_proto_svc_svc_proto_rawDescData = file_proto_svc_svc_proto_rawDesc
)

func file_proto_svc_svc_proto_rawDescGZIP() []byte {
	file_proto_svc_svc_proto_rawDescOnce.Do(func() {
		file_proto_svc_svc_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_svc_svc_proto_rawDescData)
	})
	return file_proto_svc_svc_proto_rawDescData
}

var file_proto_svc_svc_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_proto_svc_svc_proto_goTypes = []interface{}{
	(*SvcInfo)(nil),  // 0: svc.SvcInfo
	(*SvcPort)(nil),  // 1: svc.SvcPort
	(*SvcId)(nil),    // 2: svc.SvcId
	(*FindAll)(nil),  // 3: svc.FindAll
	(*Response)(nil), // 4: svc.Response
	(*AllSvc)(nil),   // 5: svc.AllSvc
}
var file_proto_svc_svc_proto_depIdxs = []int32{
	1, // 0: svc.SvcInfo.svc_port:type_name -> svc.SvcPort
	0, // 1: svc.AllSvc.svc_info:type_name -> svc.SvcInfo
	0, // 2: svc.Svc.AddSvc:input_type -> svc.SvcInfo
	2, // 3: svc.Svc.DeleteSvc:input_type -> svc.SvcId
	0, // 4: svc.Svc.UpdateSvc:input_type -> svc.SvcInfo
	2, // 5: svc.Svc.FindSvcByID:input_type -> svc.SvcId
	3, // 6: svc.Svc.FindAllSvc:input_type -> svc.FindAll
	4, // 7: svc.Svc.AddSvc:output_type -> svc.Response
	4, // 8: svc.Svc.DeleteSvc:output_type -> svc.Response
	4, // 9: svc.Svc.UpdateSvc:output_type -> svc.Response
	0, // 10: svc.Svc.FindSvcByID:output_type -> svc.SvcInfo
	5, // 11: svc.Svc.FindAllSvc:output_type -> svc.AllSvc
	7, // [7:12] is the sub-list for method output_type
	2, // [2:7] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_proto_svc_svc_proto_init() }
func file_proto_svc_svc_proto_init() {
	if File_proto_svc_svc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_svc_svc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_svc_svc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcPort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_svc_svc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SvcId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_svc_svc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_svc_svc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_svc_svc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AllSvc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_svc_svc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_svc_svc_proto_goTypes,
		DependencyIndexes: file_proto_svc_svc_proto_depIdxs,
		MessageInfos:      file_proto_svc_svc_proto_msgTypes,
	}.Build()
	File_proto_svc_svc_proto = out.File
	file_proto_svc_svc_proto_rawDesc = nil
	file_proto_svc_svc_proto_goTypes = nil
	file_proto_svc_svc_proto_depIdxs = nil
}
