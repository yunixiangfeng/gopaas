// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/appStore/appStore.proto

package appStore

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for AppStore service

func NewAppStoreEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for AppStore service

type AppStoreService interface {
	//对外提供添加服务
	AddAppStore(ctx context.Context, in *AppStoreInfo, opts ...client.CallOption) (*Response, error)
	DeleteAppStore(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Response, error)
	UpdateAppStore(ctx context.Context, in *AppStoreInfo, opts ...client.CallOption) (*Response, error)
	FindAppStoreByID(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*AppStoreInfo, error)
	FindAllAppStore(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllAppStore, error)
	//添加常用的接口
	AddInstallNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Response, error)
	GetInstallNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Number, error)
	AddViewNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Response, error)
	GetViewNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Number, error)
}

type appStoreService struct {
	c    client.Client
	name string
}

func NewAppStoreService(name string, c client.Client) AppStoreService {
	return &appStoreService{
		c:    c,
		name: name,
	}
}

func (c *appStoreService) AddAppStore(ctx context.Context, in *AppStoreInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.AddAppStore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) DeleteAppStore(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.DeleteAppStore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) UpdateAppStore(ctx context.Context, in *AppStoreInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.UpdateAppStore", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) FindAppStoreByID(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*AppStoreInfo, error) {
	req := c.c.NewRequest(c.name, "AppStore.FindAppStoreByID", in)
	out := new(AppStoreInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) FindAllAppStore(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllAppStore, error) {
	req := c.c.NewRequest(c.name, "AppStore.FindAllAppStore", in)
	out := new(AllAppStore)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) AddInstallNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.AddInstallNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) GetInstallNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Number, error) {
	req := c.c.NewRequest(c.name, "AppStore.GetInstallNum", in)
	out := new(Number)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) AddViewNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "AppStore.AddViewNum", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appStoreService) GetViewNum(ctx context.Context, in *AppStoreId, opts ...client.CallOption) (*Number, error) {
	req := c.c.NewRequest(c.name, "AppStore.GetViewNum", in)
	out := new(Number)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AppStore service

type AppStoreHandler interface {
	//对外提供添加服务
	AddAppStore(context.Context, *AppStoreInfo, *Response) error
	DeleteAppStore(context.Context, *AppStoreId, *Response) error
	UpdateAppStore(context.Context, *AppStoreInfo, *Response) error
	FindAppStoreByID(context.Context, *AppStoreId, *AppStoreInfo) error
	FindAllAppStore(context.Context, *FindAll, *AllAppStore) error
	//添加常用的接口
	AddInstallNum(context.Context, *AppStoreId, *Response) error
	GetInstallNum(context.Context, *AppStoreId, *Number) error
	AddViewNum(context.Context, *AppStoreId, *Response) error
	GetViewNum(context.Context, *AppStoreId, *Number) error
}

func RegisterAppStoreHandler(s server.Server, hdlr AppStoreHandler, opts ...server.HandlerOption) error {
	type appStore interface {
		AddAppStore(ctx context.Context, in *AppStoreInfo, out *Response) error
		DeleteAppStore(ctx context.Context, in *AppStoreId, out *Response) error
		UpdateAppStore(ctx context.Context, in *AppStoreInfo, out *Response) error
		FindAppStoreByID(ctx context.Context, in *AppStoreId, out *AppStoreInfo) error
		FindAllAppStore(ctx context.Context, in *FindAll, out *AllAppStore) error
		AddInstallNum(ctx context.Context, in *AppStoreId, out *Response) error
		GetInstallNum(ctx context.Context, in *AppStoreId, out *Number) error
		AddViewNum(ctx context.Context, in *AppStoreId, out *Response) error
		GetViewNum(ctx context.Context, in *AppStoreId, out *Number) error
	}
	type AppStore struct {
		appStore
	}
	h := &appStoreHandler{hdlr}
	return s.Handle(s.NewHandler(&AppStore{h}, opts...))
}

type appStoreHandler struct {
	AppStoreHandler
}

func (h *appStoreHandler) AddAppStore(ctx context.Context, in *AppStoreInfo, out *Response) error {
	return h.AppStoreHandler.AddAppStore(ctx, in, out)
}

func (h *appStoreHandler) DeleteAppStore(ctx context.Context, in *AppStoreId, out *Response) error {
	return h.AppStoreHandler.DeleteAppStore(ctx, in, out)
}

func (h *appStoreHandler) UpdateAppStore(ctx context.Context, in *AppStoreInfo, out *Response) error {
	return h.AppStoreHandler.UpdateAppStore(ctx, in, out)
}

func (h *appStoreHandler) FindAppStoreByID(ctx context.Context, in *AppStoreId, out *AppStoreInfo) error {
	return h.AppStoreHandler.FindAppStoreByID(ctx, in, out)
}

func (h *appStoreHandler) FindAllAppStore(ctx context.Context, in *FindAll, out *AllAppStore) error {
	return h.AppStoreHandler.FindAllAppStore(ctx, in, out)
}

func (h *appStoreHandler) AddInstallNum(ctx context.Context, in *AppStoreId, out *Response) error {
	return h.AppStoreHandler.AddInstallNum(ctx, in, out)
}

func (h *appStoreHandler) GetInstallNum(ctx context.Context, in *AppStoreId, out *Number) error {
	return h.AppStoreHandler.GetInstallNum(ctx, in, out)
}

func (h *appStoreHandler) AddViewNum(ctx context.Context, in *AppStoreId, out *Response) error {
	return h.AppStoreHandler.AddViewNum(ctx, in, out)
}

func (h *appStoreHandler) GetViewNum(ctx context.Context, in *AppStoreId, out *Number) error {
	return h.AppStoreHandler.GetViewNum(ctx, in, out)
}
