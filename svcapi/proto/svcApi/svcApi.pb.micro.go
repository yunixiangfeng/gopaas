// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/svcApi/svcApi.proto

package svcApi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for SvcApi service

func NewSvcApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for SvcApi service

type SvcApiService interface {
	FindSvcById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddSvc(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteSvcById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateSvc(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type svcApiService struct {
	c    client.Client
	name string
}

func NewSvcApiService(name string, c client.Client) SvcApiService {
	return &svcApiService{
		c:    c,
		name: name,
	}
}

func (c *svcApiService) FindSvcById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SvcApi.FindSvcById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcApiService) AddSvc(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SvcApi.AddSvc", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcApiService) DeleteSvcById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SvcApi.DeleteSvcById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcApiService) UpdateSvc(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SvcApi.UpdateSvc", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *svcApiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "SvcApi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SvcApi service

type SvcApiHandler interface {
	FindSvcById(context.Context, *Request, *Response) error
	AddSvc(context.Context, *Request, *Response) error
	DeleteSvcById(context.Context, *Request, *Response) error
	UpdateSvc(context.Context, *Request, *Response) error
	//默认接口
	Call(context.Context, *Request, *Response) error
}

func RegisterSvcApiHandler(s server.Server, hdlr SvcApiHandler, opts ...server.HandlerOption) error {
	type svcApi interface {
		FindSvcById(ctx context.Context, in *Request, out *Response) error
		AddSvc(ctx context.Context, in *Request, out *Response) error
		DeleteSvcById(ctx context.Context, in *Request, out *Response) error
		UpdateSvc(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
	}
	type SvcApi struct {
		svcApi
	}
	h := &svcApiHandler{hdlr}
	return s.Handle(s.NewHandler(&SvcApi{h}, opts...))
}

type svcApiHandler struct {
	SvcApiHandler
}

func (h *svcApiHandler) FindSvcById(ctx context.Context, in *Request, out *Response) error {
	return h.SvcApiHandler.FindSvcById(ctx, in, out)
}

func (h *svcApiHandler) AddSvc(ctx context.Context, in *Request, out *Response) error {
	return h.SvcApiHandler.AddSvc(ctx, in, out)
}

func (h *svcApiHandler) DeleteSvcById(ctx context.Context, in *Request, out *Response) error {
	return h.SvcApiHandler.DeleteSvcById(ctx, in, out)
}

func (h *svcApiHandler) UpdateSvc(ctx context.Context, in *Request, out *Response) error {
	return h.SvcApiHandler.UpdateSvc(ctx, in, out)
}

func (h *svcApiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.SvcApiHandler.Call(ctx, in, out)
}
