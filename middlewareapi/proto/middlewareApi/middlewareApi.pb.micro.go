// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/middlewareApi/middlewareApi.proto

package middlewareApi

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for MiddlewareApi service

func NewMiddlewareApiEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for MiddlewareApi service

type MiddlewareApiService interface {
	FindMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//默认接口
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//根据类型获取所有中间件
	FindAllMiddlewareByTypeId(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	//中间件类型对外开发的API
	FindMiddleTypeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	AddMiddleType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	DeleteMiddleTypeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	UpdateMiddleType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	FindAllMiddleType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type middlewareApiService struct {
	c    client.Client
	name string
}

func NewMiddlewareApiService(name string, c client.Client) MiddlewareApiService {
	return &middlewareApiService{
		c:    c,
		name: name,
	}
}

func (c *middlewareApiService) FindMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.FindMiddlewareById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) AddMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.AddMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) DeleteMiddlewareById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.DeleteMiddlewareById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) UpdateMiddleware(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.UpdateMiddleware", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) FindAllMiddlewareByTypeId(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.FindAllMiddlewareByTypeId", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) FindMiddleTypeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.FindMiddleTypeById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) AddMiddleType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.AddMiddleType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) DeleteMiddleTypeById(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.DeleteMiddleTypeById", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) UpdateMiddleType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.UpdateMiddleType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlewareApiService) FindAllMiddleType(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "MiddlewareApi.FindAllMiddleType", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for MiddlewareApi service

type MiddlewareApiHandler interface {
	FindMiddlewareById(context.Context, *Request, *Response) error
	AddMiddleware(context.Context, *Request, *Response) error
	DeleteMiddlewareById(context.Context, *Request, *Response) error
	UpdateMiddleware(context.Context, *Request, *Response) error
	//默认接口
	Call(context.Context, *Request, *Response) error
	//根据类型获取所有中间件
	FindAllMiddlewareByTypeId(context.Context, *Request, *Response) error
	//中间件类型对外开发的API
	FindMiddleTypeById(context.Context, *Request, *Response) error
	AddMiddleType(context.Context, *Request, *Response) error
	DeleteMiddleTypeById(context.Context, *Request, *Response) error
	UpdateMiddleType(context.Context, *Request, *Response) error
	FindAllMiddleType(context.Context, *Request, *Response) error
}

func RegisterMiddlewareApiHandler(s server.Server, hdlr MiddlewareApiHandler, opts ...server.HandlerOption) error {
	type middlewareApi interface {
		FindMiddlewareById(ctx context.Context, in *Request, out *Response) error
		AddMiddleware(ctx context.Context, in *Request, out *Response) error
		DeleteMiddlewareById(ctx context.Context, in *Request, out *Response) error
		UpdateMiddleware(ctx context.Context, in *Request, out *Response) error
		Call(ctx context.Context, in *Request, out *Response) error
		FindAllMiddlewareByTypeId(ctx context.Context, in *Request, out *Response) error
		FindMiddleTypeById(ctx context.Context, in *Request, out *Response) error
		AddMiddleType(ctx context.Context, in *Request, out *Response) error
		DeleteMiddleTypeById(ctx context.Context, in *Request, out *Response) error
		UpdateMiddleType(ctx context.Context, in *Request, out *Response) error
		FindAllMiddleType(ctx context.Context, in *Request, out *Response) error
	}
	type MiddlewareApi struct {
		middlewareApi
	}
	h := &middlewareApiHandler{hdlr}
	return s.Handle(s.NewHandler(&MiddlewareApi{h}, opts...))
}

type middlewareApiHandler struct {
	MiddlewareApiHandler
}

func (h *middlewareApiHandler) FindMiddlewareById(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.FindMiddlewareById(ctx, in, out)
}

func (h *middlewareApiHandler) AddMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.AddMiddleware(ctx, in, out)
}

func (h *middlewareApiHandler) DeleteMiddlewareById(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.DeleteMiddlewareById(ctx, in, out)
}

func (h *middlewareApiHandler) UpdateMiddleware(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.UpdateMiddleware(ctx, in, out)
}

func (h *middlewareApiHandler) Call(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.Call(ctx, in, out)
}

func (h *middlewareApiHandler) FindAllMiddlewareByTypeId(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.FindAllMiddlewareByTypeId(ctx, in, out)
}

func (h *middlewareApiHandler) FindMiddleTypeById(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.FindMiddleTypeById(ctx, in, out)
}

func (h *middlewareApiHandler) AddMiddleType(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.AddMiddleType(ctx, in, out)
}

func (h *middlewareApiHandler) DeleteMiddleTypeById(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.DeleteMiddleTypeById(ctx, in, out)
}

func (h *middlewareApiHandler) UpdateMiddleType(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.UpdateMiddleType(ctx, in, out)
}

func (h *middlewareApiHandler) FindAllMiddleType(ctx context.Context, in *Request, out *Response) error {
	return h.MiddlewareApiHandler.FindAllMiddleType(ctx, in, out)
}
