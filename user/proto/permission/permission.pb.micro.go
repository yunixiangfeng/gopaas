// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/permission/permission.proto

package permission

import (
	fmt "fmt"
	proto "google.golang.org/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/asim/go-micro/v3/api"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)
// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for User service

func NewPermissionEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}


// Client API for Permission service

type PermissionService interface {
	//对外提供添加服务
	AddPermission(ctx context.Context, in *PermissionInfo, opts ...client.CallOption) (*Response, error)
	DeletePermission(ctx context.Context, in *PermissionId, opts ...client.CallOption) (*Response, error)
	UpdatePermission(ctx context.Context, in *PermissionInfo, opts ...client.CallOption) (*Response, error)
	FindPermissionByID(ctx context.Context, in *PermissionId, opts ...client.CallOption) (*PermissionInfo, error)
	FindAllPermission(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllPermission, error)
}

type permissionService struct {
	c    client.Client
	name string
}

func NewPermissionService(name string, c client.Client) PermissionService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "permission"
	}
	return &permissionService{
		c:    c,
		name: name,
	}
}

func (c *permissionService) AddPermission(ctx context.Context, in *PermissionInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permission.AddPermission", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) DeletePermission(ctx context.Context, in *PermissionId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permission.DeletePermission", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) UpdatePermission(ctx context.Context, in *PermissionInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Permission.UpdatePermission", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) FindPermissionByID(ctx context.Context, in *PermissionId, opts ...client.CallOption) (*PermissionInfo, error) {
	req := c.c.NewRequest(c.name, "Permission.FindPermissionByID", in)
	out := new(PermissionInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *permissionService) FindAllPermission(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllPermission, error) {
	req := c.c.NewRequest(c.name, "Permission.FindAllPermission", in)
	out := new(AllPermission)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Permission service

type PermissionHandler interface {
	//对外提供添加服务
	AddPermission(context.Context, *PermissionInfo, *Response) error
	DeletePermission(context.Context, *PermissionId, *Response) error
	UpdatePermission(context.Context, *PermissionInfo, *Response) error
	FindPermissionByID(context.Context, *PermissionId, *PermissionInfo) error
	FindAllPermission(context.Context, *FindAll, *AllPermission) error
}

func RegisterPermissionHandler(s server.Server, hdlr PermissionHandler, opts ...server.HandlerOption) error {
	type permission interface {
		AddPermission(ctx context.Context, in *PermissionInfo, out *Response) error
		DeletePermission(ctx context.Context, in *PermissionId, out *Response) error
		UpdatePermission(ctx context.Context, in *PermissionInfo, out *Response) error
		FindPermissionByID(ctx context.Context, in *PermissionId, out *PermissionInfo) error
		FindAllPermission(ctx context.Context, in *FindAll, out *AllPermission) error
	}
	type Permission struct {
		permission
	}
	h := &permissionHandler{hdlr}
	return s.Handle(s.NewHandler(&Permission{h}, opts...))
}

type permissionHandler struct {
	PermissionHandler
}

func (h *permissionHandler) AddPermission(ctx context.Context, in *PermissionInfo, out *Response) error {
	return h.PermissionHandler.AddPermission(ctx, in, out)
}

func (h *permissionHandler) DeletePermission(ctx context.Context, in *PermissionId, out *Response) error {
	return h.PermissionHandler.DeletePermission(ctx, in, out)
}

func (h *permissionHandler) UpdatePermission(ctx context.Context, in *PermissionInfo, out *Response) error {
	return h.PermissionHandler.UpdatePermission(ctx, in, out)
}

func (h *permissionHandler) FindPermissionByID(ctx context.Context, in *PermissionId, out *PermissionInfo) error {
	return h.PermissionHandler.FindPermissionByID(ctx, in, out)
}

func (h *permissionHandler) FindAllPermission(ctx context.Context, in *FindAll, out *AllPermission) error {
	return h.PermissionHandler.FindAllPermission(ctx, in, out)
}
