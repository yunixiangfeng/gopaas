// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/base/base.proto

package base

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/asim/go-micro/v3/client"
	server "github.com/asim/go-micro/v3/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Base service

type BaseService interface {
	//对外提供添加服务
	AddBase(ctx context.Context, in *BaseInfo, opts ...client.CallOption) (*Response, error)
	DeleteBase(ctx context.Context, in *BaseId, opts ...client.CallOption) (*Response, error)
	UpdateBase(ctx context.Context, in *BaseInfo, opts ...client.CallOption) (*Response, error)
	FindBaseByID(ctx context.Context, in *BaseId, opts ...client.CallOption) (*BaseInfo, error)
	FindAllBase(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllBase, error)
}

type baseService struct {
	c    client.Client
	name string
}

func NewBaseService(name string, c client.Client) BaseService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "base"
	}
	return &baseService{
		c:    c,
		name: name,
	}
}

func (c *baseService) AddBase(ctx context.Context, in *BaseInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Base.AddBase", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseService) DeleteBase(ctx context.Context, in *BaseId, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Base.DeleteBase", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseService) UpdateBase(ctx context.Context, in *BaseInfo, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Base.UpdateBase", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseService) FindBaseByID(ctx context.Context, in *BaseId, opts ...client.CallOption) (*BaseInfo, error) {
	req := c.c.NewRequest(c.name, "Base.FindBaseByID", in)
	out := new(BaseInfo)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *baseService) FindAllBase(ctx context.Context, in *FindAll, opts ...client.CallOption) (*AllBase, error) {
	req := c.c.NewRequest(c.name, "Base.FindAllBase", in)
	out := new(AllBase)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Base service

type BaseHandler interface {
	//对外提供添加服务
	AddBase(context.Context, *BaseInfo, *Response) error
	DeleteBase(context.Context, *BaseId, *Response) error
	UpdateBase(context.Context, *BaseInfo, *Response) error
	FindBaseByID(context.Context, *BaseId, *BaseInfo) error
	FindAllBase(context.Context, *FindAll, *AllBase) error
}

func RegisterBaseHandler(s server.Server, hdlr BaseHandler, opts ...server.HandlerOption) error {
	type base interface {
		AddBase(ctx context.Context, in *BaseInfo, out *Response) error
		DeleteBase(ctx context.Context, in *BaseId, out *Response) error
		UpdateBase(ctx context.Context, in *BaseInfo, out *Response) error
		FindBaseByID(ctx context.Context, in *BaseId, out *BaseInfo) error
		FindAllBase(ctx context.Context, in *FindAll, out *AllBase) error
	}
	type Base struct {
		base
	}
	h := &baseHandler{hdlr}
	return s.Handle(s.NewHandler(&Base{h}, opts...))
}

type baseHandler struct {
	BaseHandler
}

func (h *baseHandler) AddBase(ctx context.Context, in *BaseInfo, out *Response) error {
	return h.BaseHandler.AddBase(ctx, in, out)
}

func (h *baseHandler) DeleteBase(ctx context.Context, in *BaseId, out *Response) error {
	return h.BaseHandler.DeleteBase(ctx, in, out)
}

func (h *baseHandler) UpdateBase(ctx context.Context, in *BaseInfo, out *Response) error {
	return h.BaseHandler.UpdateBase(ctx, in, out)
}

func (h *baseHandler) FindBaseByID(ctx context.Context, in *BaseId, out *BaseInfo) error {
	return h.BaseHandler.FindBaseByID(ctx, in, out)
}

func (h *baseHandler) FindAllBase(ctx context.Context, in *FindAll, out *AllBase) error {
	return h.BaseHandler.FindAllBase(ctx, in, out)
}
